// 堆内存：
// 对象数据类型或者函数数据类型在定义的时候首先都会开辟一个堆内存，
// 堆内存有一个引用地址，如果外面有变量知道这个地址，我们就说这个内存
// 被占用了，就不能销毁
var obj1 = {name: 'psg'};
var obj2 = obj1;

// 我我们想要堆内存释放/销毁，只需要把所有引用它的变量赋值为null即可，
// 如果当前的堆内存没有任何东西被占用，那么浏览器会在空闲的时候
// 把它销毁
obj1 = null;
obj2 = null;

/*-------------------------------------------------------*/

// 浏览器的性能就会顺畅，这就是前端开发性能好的一个非常大的因素，在于
// 浏览器对自己的内存回收和释放机制是非常完善的。
// 对于堆内存，我可以手动通过null来进行释放
// 对于栈内存，可以通过函数执行完之后自行销毁 

/*-------------------------------------------------------*/

// 栈内存
// 1）全局作用域
// 只有当页面关闭的时候，全局作用域才会销毁

// 2）私有作用域（只有函数执行会产生私有作用域，当私有作用域中的代码
// 执行完成后，我们当前作用域就都会主动进行释放和销毁）
// 但是还是存在特殊情况
// 2.2）当前私有作用域中的部分内存被作用域外的东西占用，那么当前作用域
// 就不能销毁
// a、函数执行返回一个引用数据类型，并且被外面的接受了，则此私有作用域
// 不销毁
// 情况一：
// function fn() {
// 	var num = 100;
// 	return function() {}
// }
// var f = fn(); // fn执行的私有作用域不销毁
// 情况二：
// var oDiv = document.getElementById("xxx");
// ~function() {
// 	oDiv.onclick = function() {} // 立即执行函数的私有作用域不销毁
// }
